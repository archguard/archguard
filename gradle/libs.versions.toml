[versions]
kotlin = "1.8.0"
dokka = "1.6.21"

kotlinxCoroutines = "1.6.4"
kotlinxSerialization = "1.4.1"

# Spring
springBoot = "2.7.8"
jackson = "2.14.1"

# Test
junit = "5.9.1"
kotlinTest = "5.5.4"
mockk = "1.13.3"
assertj = "3.22.0"
kotest = "5.5.4"

chapi = "2.4.0"

shadowJar = "7.1.2"

clikt = "3.5.1"

logback = "1.4.5"

jsqlparser = "4.5"

jgit = "6.4.0.202211300538-r"

dataframe = "0.9.1"

[libraries]
kotlin-stdlib = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib", version.ref = "kotlin" }
kotlin-scriptingJvm = { group = "org.jetbrains.kotlin", name = "kotlin-scripting-jvm", version.ref = "kotlin" }
kotlin-reflect = { group = "org.jetbrains.kotlin", name = "kotlin-reflect", version.ref = "kotlin" }
kotlin-stdlibJdk8 = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib-jdk8", version.ref = "kotlin" }

# Kotlinx Serialization
serialization-json = { group = "org.jetbrains.kotlinx", name = "kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
serialization-protobuf = { group = "org.jetbrains.kotlinx", name = "kotlinx-serialization-protobuf", version.ref = "kotlinxSerialization" }
jackson-kotlin = { group = "com.fasterxml.jackson.module", name = "jackson-module-kotlin", version.ref = "jackson" }
jackson-format-csv = { group = "com.fasterxml.jackson.dataformat", name = "jackson-dataformat-csv", version.ref = "jackson" }

# Coroutines
coroutines-core = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
coroutines-reactor = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-reactor", version.ref = "kotlinxCoroutines" }

# Testing
test-junit-api = { group = "org.junit.jupiter", name = "junit-jupiter-api", version.ref = "junit" }
test-junit-params = { group = "org.junit.jupiter", name = "junit-jupiter-params", version.ref = "junit" }
test-junit-engine = { group = "org.junit.jupiter", name = "junit-jupiter-engine", version.ref = "junit" }
test-kotlintest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotlinTest" }
test-mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }
test-assertj = { group = "org.assertj", name = "assertj-core", version.ref = "assertj" }

kotest-core = { group = "io.kotest", name = "kotest-framework-engine", version.ref = "kotest" }
kotest-junit5 = { group = "io.kotest", name = "kotest-runner-junit5", version.ref = "kotest" }

# Chapi
chapi-domain = { group = "com.phodal.chapi", name = "chapi-domain", version.ref = "chapi" }
chapi-java = { group = "com.phodal.chapi", name = "chapi-ast-java", version.ref = "chapi" }
chapi-kotlin = { group = "com.phodal.chapi", name = "chapi-ast-kotlin", version.ref = "chapi" }
chapi-go = { group = "com.phodal.chapi", name = "chapi-ast-go", version.ref = "chapi" }
chapi-csharp = { group = "com.phodal.chapi", name = "chapi-ast-csharp", version.ref = "chapi" }
chapi-python = { group = "com.phodal.chapi", name = "chapi-ast-python", version.ref = "chapi" }
chapi-scala = { group = "com.phodal.chapi", name = "chapi-ast-scala", version.ref = "chapi" }
chapi-typescript = { group = "com.phodal.chapi", name = "chapi-ast-typescript", version.ref = "chapi" }
chapi-rust = { group = "com.phodal.chapi", name = "chapi-ast-rust", version.ref = "chapi" }
chapi-c = { group = "com.phodal.chapi", name = "chapi-ast-c", version.ref = "chapi" }
chapi-cpp = { group = "com.phodal.chapi", name = "chapi-ast-cpp", version.ref = "chapi" }
chapi-parser-toml = { group = "com.phodal.chapi", name = "chapi-parser-toml", version.ref = "chapi" }
chapi-parser-cmake = { group = "com.phodal.chapi", name = "chapi-parser-cmake", version.ref = "chapi" }
chapi-proto = { group = "com.phodal.chapi", name = "chapi-ast-protobuf", version.ref = "chapi" }

# clikt
clikt = { group = "com.github.ajalt.clikt", name = "clikt", version.ref="clikt" }

# log
logback-classic = { group = "ch.qos.logback", name = "logback-classic", version.ref = "logback" }
logback-core = { group = "ch.qos.logback", name = "logback-core", version.ref = "logback" }

jsqlparser = { group = "com.github.jsqlparser", name = "jsqlparser", version.ref = "jsqlparser" }

jgit = { group = "org.eclipse.jgit", name = "org.eclipse.jgit", version.ref = "jgit" }

dataframe-arrow = { group = "org.jetbrains.kotlinx", name = "dataframe-arrow", version.ref = "dataframe" }

# springboot
springboot-web = { group = "org.springframework.boot", name = "spring-boot-starter-web", version.ref = "springBoot" }
springboot-jdbc = { group = "org.springframework.boot", name = "spring-boot-starter-jdbc", version.ref = "springBoot" }
springboot-actuator = { group = "org.springframework.boot", name = "spring-boot-starter-actuator", version.ref = "springBoot" }
springboot-validation = { group = "org.springframework.boot", name = "spring-boot-starter-validation", version.ref = "springBoot" }
springboot-websocket = { group = "org.springframework.boot", name = "spring-boot-starter-websocket", version.ref = "springBoot" }
springboot-cache = { group = "org.springframework.boot", name = "spring-boot-starter-cache", version.ref = "springBoot" }

springboot-test = { group = "org.springframework.boot", name = "spring-boot-starter-test", version.ref = "springBoot" }

swagger-parser-v3 = "io.swagger.parser.v3:swagger-parser-v3:2.1.12"

commonmark-core = "org.commonmark:commonmark:0.21.0"
commonmark-gfm-tables = "org.commonmark:commonmark-ext-gfm-tables:0.21.0"

[plugins]
jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
springboot = { id = "org.springframework.boot", version.ref = "springBoot" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadowJar" }

[bundles]
test = ["test-junit-params", "test-kotlintest-assertions", "test-mockk", "test-assertj"]
markdown = ["commonmark-core", "commonmark-gfm-tables"]
